import React, { useEffect, useState } from "react";
import { useSession, signOut } from "next-auth/react";
import Image from "next/image";
import { useRouter } from "next/router";
import { CgArrowsV } from "react-icons/cg";
import { TiTick } from "react-icons/ti";
import { FiPlus, FiSettings } from "react-icons/fi";
import { AiOutlinePlus, AiOutlineSearch } from "react-icons/ai";
import { TbClockHour9 } from "react-icons/tb";
import { BsLayoutThreeColumns } from "react-icons/bs";
import Head from "next/head";
import saveTodoItems from "../utils/AddTasks";
import savePageItems from "../utils/AddPages";
import getPagesByEmail from "../utils/GetPages";
import getTasksByEmail from "../utils/GetTasks";
import TodoItem from "../components/TodoItem";
import { HiOutlineDocumentText } from "react-icons/hi";
import PageView from "../components/PageView";
import { MdDeleteOutline } from "react-icons/md";
import MobileViewProfile from "../components/MobileViewProfile";
import { BiMenu } from "react-icons/bi";
import {
  Drawer,
  DrawerBody,
  DrawerContent,
  DrawerHeader,
  DrawerOverlay,
  useDisclosure,
} from "@chakra-ui/react";
const Profile = () => {
  const [showProfile, setShowProfile] = useState(false);
  const [showTasks, setShowTasks] = useState(false);
  const { data: session } = useSession();
  const [todoItems, setTodoItems] = useState([]);
  const { isOpen, onOpen, onClose } = useDisclosure();

  const [pages, setPages] = useState([]);
  const [selectedPage, setSelectedPage] = useState(null);

  const router = useRouter();

  // useEffect(() => {
  //   if (!session) {
  //     router.push("/login");
  //   }
  // }, [router, session]);

  const signOutHandler = async () => {
    await router.push("/");
    signOut();
  };
  useEffect(() => {
    if (session) {
      if (todoItems.length > 0) {
        const saveTodo = async () => {
          await saveTodoItems(session.user.email, todoItems);
          localStorage.setItem("taskDB", JSON.stringify(todoItems));
        };
        saveTodo();
      }
    }
  }, [todoItems, session]);
  useEffect(() => {
    if (session) {
      const savePages = async () => {
        await savePageItems(session.user.email, pages);
        localStorage.setItem("PageDb", JSON.stringify(pages));
      };
      savePages();
    }
  }, [pages, session]);

  useEffect(() => {
    function handleClickOutside(event) {
      if (showProfile && !event.target.closest("button")) {
        setShowProfile(false);
      }
    }
    document.addEventListener("click", handleClickOutside);
    return () => {
      document.removeEventListener("click", handleClickOutside);
    };
  }, [showProfile]);
  const handleAddTodo = async () => {
    const newTodo = { id: todoItems.length + 1, title: "Untitled" };
    setTodoItems([...todoItems, newTodo]);
  };

  const handleDeleteTodo = (id) => {
    const updatedTodoItems = todoItems.filter((todo) => todo.id !== id);
    setTodoItems(updatedTodoItems);
  };
  const handleUpdateTitle = (id, title) => {
    const updatedTodoItems = todoItems.map((todo) =>
      todo.id === id ? { ...todo, title } : todo
    );
    setTodoItems(updatedTodoItems);
  };
  const handleAddPage = () => {
    const newPage = { id: pages.length + 1, title: "Untitled", content: "" };
    setPages([...pages, newPage]);
  };

  const handleDeletePage = (id) => {
    const updatedPage = pages.filter((page) => page.id !== id);
    setPages(updatedPage);
  };
  const handleUpdatePageTitle = (id, title) => {
    const updatedPage = pages.map((page) =>
      page.id === id ? { ...page, title } : page
    );
    setPages(updatedPage);
  };
  const handleUpdatePageContent = (id, content) => {
    const updatedPage = pages.map((page) =>
      page.id === id ? { ...page, content } : page
    );

    setPages(updatedPage);
  };
  const handleClick = (id, title, content) => {
    setShowTasks(false);
    onClose();
    setSelectedPage({ id, title, content });
  };

  const showTasksHandler = () => {
    onClose();
    setSelectedPage(null);
    setShowTasks(true);
  };

  useEffect(() => {
    const savedTaskData = localStorage.getItem("taskDB");
    if (savedTaskData) {
      const data = JSON.parse(savedTaskData);
      setTodoItems(data);
    }
    const savedPageData = localStorage.getItem("PageDb");
    if (savedPageData) {
      const data = JSON.parse(savedPageData);
      setPages(data);
    }
  }, []);

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-screen">
        <div className="h-fit w-fit p-1">
          <button
            className="lg:hidden  hover:bg-gray-200 rounded-full p-2"
            onClick={onOpen}
          >
            <BiMenu size="1.5rem" />
          </button>
        </div>
        <Drawer placement="left" onClose={onClose} isOpen={isOpen}>
          <DrawerOverlay />
          <DrawerContent>
            <DrawerHeader borderBottomWidth="1px">
              <button
                className="flex py-4 px-2 w-full gap-2 hover:bg-gray-100 items-center"
                onClick={() => setShowProfile(true)}
              >
                <div className="h-6 w-6 ">
                  {session && (
                    <Image
                      src={session && session.user.image}
                      alt=""
                      width={24}
                      height={24}
                    />
                  )}
                </div>
                <div>{session && session.user.name} &apos;s ....</div>
                <CgArrowsV className="ml-auto" />
              </button>
              {showProfile && (
                <div className="bg-gray-50 z-100 absolute top-10 left-8 w-64 h-64 border-2 border-solid text-[12px] p-2 text-gray-400">
                  <h1>{session ? session.user.name : "Hello"}</h1>
                  <div className="  w-full  my-4 hover:bg-gray-100 ">
                    <div className="flex  items-center w-full py-2 cursor-pointer">
                      {" "}
                      {session && (
                        <Image
                          src={session.user.image}
                          alt=""
                          width={36}
                          height={36}
                        />
                      )}
                      <div className="ml-4 text-base ">
                        {session ? session.user.name : "Hello"}
                      </div>
                      <TiTick size="1.5rem" className="ml-auto" />
                    </div>
                  </div>
                  <button
                    className="text-[12px] w-full text-left pl-2 hover:bg-gray-100 py-2"
                    onClick={signOutHandler}
                  >
                    Log out
                  </button>
                </div>
              )}
            </DrawerHeader>
            <DrawerBody>
              <>
                <div className="px-2">
                  <button className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold">
                    <AiOutlineSearch />
                    Search
                  </button>
                  <button className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold">
                    <TbClockHour9 />
                    Updates
                  </button>
                  <button className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold">
                    <FiSettings />
                    Settings & members
                  </button>
                  {/* {console.log(initialItems)} */}

                  <button
                    className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold"
                    onClick={handleAddPage}
                  >
                    <FiPlus />
                    Add a page
                  </button>

                  <button
                    className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold"
                    onClick={showTasksHandler}
                  >
                    <FiPlus />
                    Tasks
                  </button>

                  {pages.map((page) => (
                    <div
                      key={page.id}
                      className="py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold flex cursor-pointer"
                      onClick={() =>
                        handleClick(page.id, page.title, page.content)
                      }
                    >
                      <HiOutlineDocumentText />
                      {page.title}
                      <button
                        className="ml-auto p-2 h-full hover:bg-gray-400 "
                        onClick={() => handleDeletePage(page.id)}
                      >
                        <MdDeleteOutline />
                      </button>
                    </div>
                  ))}
                </div>
              </>
            </DrawerBody>
          </DrawerContent>
        </Drawer>
        {!showTasks && !selectedPage && (
          <div className="flex lg:hidden mx-auto my-auto justify-center items-center font-bold">
            Welcome to Notion Clone web app made by Anand Pandey
          </div>
        )}
        <div className="hidden lg:block w-64 border-2 border-sold bg-gray-50 h-full text-sm z-10 pl-4 py-2  overflow-auto">
          <div className="relative px-2 w-full ">
            <button
              className="flex py-4 px-2 w-full gap-2 hover:bg-gray-100 items-center"
              onClick={() => setShowProfile(true)}
            >
              <div className="h-6 w-6 ">
                {session && (
                  <Image
                    src={session && session.user.image}
                    alt=""
                    width={24}
                    height={24}
                  />
                )}
              </div>
              <div>{session && session.user.name} &apos;s ....</div>
              <CgArrowsV className="ml-auto" />
            </button>
            {showProfile && (
              <div className="bg-gray-50 z-100 absolute top-10 left-8 w-64 h-64 border-2 border-solid text-[12px] p-2 text-gray-400">
                <h1>{session ? session.user.name : "Hello"}</h1>
                <div className="  w-full  my-4 hover:bg-gray-100 ">
                  <div className="flex  items-center w-full py-2 cursor-pointer">
                    {" "}
                    {session && (
                      <Image
                        src={session.user.image}
                        alt=""
                        width={36}
                        height={36}
                      />
                    )}
                    <div className="ml-4 text-base ">
                      {session ? session.user.name : "Hello"}
                    </div>
                    <TiTick size="1.5rem" className="ml-auto" />
                  </div>
                </div>
                <button
                  className="text-[12px] w-full text-left pl-2 hover:bg-gray-100 py-2"
                  onClick={signOutHandler}
                >
                  Log out
                </button>
              </div>
            )}
          </div>
          <div className="px-2">
            <button className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold">
              <AiOutlineSearch />
              Search
            </button>
            <button className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold">
              <TbClockHour9 />
              Updates
            </button>
            <button className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold">
              <FiSettings />
              Settings & members
            </button>
            {/* {console.log(initialItems)} */}

            <button
              className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold"
              onClick={handleAddPage}
            >
              <FiPlus />
              Add a page
            </button>

            <button
              className="flex py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold"
              onClick={showTasksHandler}
            >
              <FiPlus />
              Tasks
            </button>

            {pages.map((page) => (
              <div
                key={page.id}
                className="py-2 px-2 hover:bg-gray-100 w-full items-center gap-4 font-semibold flex cursor-pointer"
                onClick={() => handleClick(page.id, page.title, page.content)}
              >
                <HiOutlineDocumentText />
                {page.title}
                <button
                  className="ml-auto p-2 h-full hover:bg-gray-400 "
                  onClick={() => handleDeletePage(page.id)}
                >
                  <MdDeleteOutline />
                </button>
              </div>
            ))}
          </div>{" "}
        </div>{" "}
        {selectedPage && (
          <div className=" h-screen overflow-y-auto w-full lg:ml-auto">
            <PageView
              selectedPage={selectedPage}
              onUpdatePageTitle={handleUpdatePageTitle}
              onUpdatePageContent={handleUpdatePageContent}
            />
          </div>
        )}
        {showTasks && (
          <div className=" h-screen overflow-y-auto w-full lg:ml-auto">
            <h1 className="flex items-center  p-2">
              <TiTick />
              Task List
            </h1>
            <div className="lg:mt-24 lg:ml-24  h-screen w-[2/3] lg:w-[40vw] p-2">
              <h1 className="font-bold text-4xl flex items-center">
                {" "}
                <TiTick />
                <span>Task List</span>
              </h1>
              <p className="text-sm">
                Use this template to track your personal tasks.
              </p>
              <p className="text-sm">
                Click <span>+ New</span> to create a new task directly on this
                board.
              </p>
              <p className="text-sm">
                Click an existing task to add additional context or subtasks.
              </p>
              <div className="flex items-center gap-2 font-semibold hover:bg-gray-100 w-fit p-1 cursor-pointer border-b-2 border-solid border-black mt-6">
                <BsLayoutThreeColumns />
                Board view
              </div>
              <div className=" ">
                <div>
                  <div className="flex items-center p-2">
                    <h1 className="bg-pink-300 px-2">To Do</h1>
                    <p className="ml-2">{todoItems.length}</p>
                    <button
                      className="ml-auto hover:bg-gray-100 p-1"
                      onClick={handleAddTodo}
                    >
                      <AiOutlinePlus />
                    </button>
                  </div>
                  <div className="p-2 flex flex-col gap-y-2 ">
                    {todoItems &&
                      todoItems.map((todo) => (
                        <TodoItem
                          key={todo.id}
                          id={todo.id}
                          title={todo.title}
                          onDelete={handleDeleteTodo}
                          onUpdateTitle={handleUpdateTitle}
                        />
                      ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
        {/* {console.log(pages)} */}
      </div>
    </>
  );
};

export default Profile;
